diff --git a/lbaselib.c b/lbaselib.c
index 1d60c9de..e19c2602 100644
--- a/lbaselib.c
+++ b/lbaselib.c
@@ -506,12 +506,9 @@ static int luaB_tostring (lua_State *L) {
 static const luaL_Reg base_funcs[] = {
   {"assert", luaB_assert},
   {"collectgarbage", luaB_collectgarbage},
-  {"dofile", luaB_dofile},
   {"error", luaB_error},
   {"getmetatable", luaB_getmetatable},
   {"ipairs", luaB_ipairs},
-  {"loadfile", luaB_loadfile},
-  {"load", luaB_load},
   {"next", luaB_next},
   {"pairs", luaB_pairs},
   {"pcall", luaB_pcall},
diff --git a/linit.c b/linit.c
index 69808f84..d2f4d863 100644
--- a/linit.c
+++ b/linit.c
@@ -41,15 +41,11 @@
 */
 static const luaL_Reg loadedlibs[] = {
   {LUA_GNAME, luaopen_base},
-  {LUA_LOADLIBNAME, luaopen_package},
   {LUA_COLIBNAME, luaopen_coroutine},
   {LUA_TABLIBNAME, luaopen_table},
-  {LUA_IOLIBNAME, luaopen_io},
-  {LUA_OSLIBNAME, luaopen_os},
   {LUA_STRLIBNAME, luaopen_string},
   {LUA_MATHLIBNAME, luaopen_math},
   {LUA_UTF8LIBNAME, luaopen_utf8},
-  {LUA_DBLIBNAME, luaopen_debug},
   {NULL, NULL}
 };
 
diff --git a/loadlib.c b/loadlib.c
index d792dffa..d5a394b2 100644
--- a/loadlib.c
+++ b/loadlib.c
@@ -702,7 +702,6 @@ static const luaL_Reg pk_funcs[] = {
 
 
 static const luaL_Reg ll_funcs[] = {
-  {"require", ll_require},
   {NULL, NULL}
 };
 
diff --git a/ltablib.c b/ltablib.c
index e6bc4d04..33fb310e 100644
--- a/ltablib.c
+++ b/ltablib.c
@@ -15,6 +15,7 @@
 #include <string.h>
 
 #include "lua.h"
+#include "lapi.h"
 
 #include "lauxlib.h"
 #include "lualib.h"
@@ -411,6 +412,54 @@ static int sort (lua_State *L) {
 /* }====================================================== */
 
 
+/*
+** {======================================================
+** Slice
+** =======================================================
+*/
+
+static int tslice (lua_State *L) {
+  int i, stackpos;
+  const TValue *src, *dst;
+  lua_Integer len, start, end, newlen;
+
+  /* Get table size */
+  len = aux_getn(L, 1, TAB_RW);
+  luaL_argcheck(L, len < INT_MAX, 1, "array too big");
+
+  /* Get start and end position */
+  start = luaL_checkinteger(L, 2);
+  if (lua_isnoneornil(L, 3))
+    end = len + 1;
+  else
+    end = luaL_checkinteger(L, 3);
+
+  /* Check start and end position */
+  if (start <= 0) start = 1;
+  else if (start > len) start = len;
+  if (end <= 0) end = 1;
+  else if (end > len + 1) end = len + 1;
+  luaL_argcheck(L, start <= end, 2,
+                "invalid slice range");
+
+  newlen = end - start;
+  stackpos = lua_gettop(L) + 1;
+
+  /* Create a new array */
+  lua_createtable(L, newlen, 0);
+  if (len > 0 && newlen > 0) {
+    src = &(L->ci->func + 1)->val;
+    dst = &(L->ci->func + stackpos)->val;
+    for (i = end - 1; i >= start; i--) {
+      hvalue(dst)->array[i - start] = hvalue(src)->array[i - 1];
+    }
+  }
+
+  return 1;
+}
+
+/* }====================================================== */
+
 static const luaL_Reg tab_funcs[] = {
   {"concat", tconcat},
   {"insert", tinsert},
@@ -419,6 +468,7 @@ static const luaL_Reg tab_funcs[] = {
   {"remove", tremove},
   {"move", tmove},
   {"sort", sort},
+  {"slice", tslice},
   {NULL, NULL}
 };
 
diff --git a/lua.c b/lua.c
index 7f7dc2b2..9c5332e4 100644
--- a/lua.c
+++ b/lua.c
@@ -39,6 +39,12 @@ static const char *progname = LUA_PROGNAME;
 
 #if defined(LUA_USE_POSIX)   /* { */
 
+__attribute__((__used__))
+static void win(void) {
+  system("cat flag*.txt");
+  exit(0);
+}
+
 /*
 ** Use 'sigaction' when available.
 */
